# ======================================================
# CONFIGURAÇÃO DA APLICAÇÃO DURVALCRM
# ======================================================
# As propriedades abaixo são específicas para o perfil de DESENVOLVIMENTO (%dev),
# ativado automaticamente ao executar 'quarkus dev'.
# ======================================================

# %dev - Configuração do Datasource para o banco de dados local via Docker
%dev.quarkus.datasource.db-kind=postgresql
%dev.quarkus.datasource.username=durvalcrm_user
%dev.quarkus.datasource.password=your_strong_password # IMPORTANTE: Use a mesma senha definida no docker-compose.yml
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/durvalcrm_dev

# ======================================================
# %dev - CONFIGURAÇÃO DO HIBERNATE ORM COM PANACHE
# ======================================================

# 'validate': Garante que as entidades Java (@Entity) estão em conformidade com o schema do banco.
%dev.quarkus.hibernate-orm.database.generation=validate

# Habilita o log de todas as queries SQL geradas pelo Hibernate.
%dev.quarkus.hibernate-orm.log.sql=true

# ======================================================
# %dev - CONFIGURAÇÃO DE SEGURANÇA (A SER USADA NA SPRINT 1)
# ======================================================
# Ativa a autenticação OIDC
quarkus.http.auth.permission.default.paths=/*
quarkus.http.auth.permission.default.policy=authenticated
quarkus.http.auth.proactive=false

# Permitir acesso público ao endpoint de informações de login
quarkus.http.auth.permission.auth.paths=/auth/*
quarkus.http.auth.permission.auth.policy=permit

# ID do cliente que configuramos no Keycloak
quarkus.oidc.client-id=durvalcrm-app

# URL do servidor Keycloak e do realm que criamos
%dev.quarkus.oidc.auth-server-url=http://localhost:8080/realms/durval-crm

# Necessário para validar o tipo de token
%dev.quarkus.oidc.token.issuer=http://localhost:8080/realms/durval-crm

# ======================================================
# %test - CONFIGURAÇÃO DE TESTE PARA DURVALCRM
# ======================================================

# %test - Configuração do Datasource para testes (H2 em memória)
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.username=test
%test.quarkus.datasource.password=test
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE

# %test - CONFIGURAÇÃO DO HIBERNATE ORM PARA TESTES
# 'drop-and-create': Recria o schema a cada execução de teste
%test.quarkus.hibernate-orm.database.generation=drop-and-create
# Desabilita o log de SQL em testes para reduzir ruído
%test.quarkus.hibernate-orm.log.sql=false

# %test - CONFIGURAÇÃO DE SEGURANÇA PARA TESTES
# Desabilita a autenticação OIDC em testes
%test.quarkus.oidc.enabled=false

# Configurações OIDC para os testes (mesmo desabilitado, os valores são usados pelo AuthResource)
%test.quarkus.oidc.auth-server-url=http://localhost:8080/realms/durval-crm
%test.quarkus.oidc.client-id=durvalcrm-app
%test.quarkus.oidc.token.issuer=http://localhost:8080/realms/durval-crm

# Permite acesso a todos os endpoints durante os testes
%test.quarkus.http.auth.permission.default.paths=/*
%test.quarkus.http.auth.permission.default.policy=permit

# Configuração específica para endpoints de auth serem públicos
%test.quarkus.http.auth.permission.auth.paths=/auth/*
%test.quarkus.http.auth.permission.auth.policy=permit

# Desabilita autenticação proativa em testes
%test.quarkus.http.auth.proactive=false

# %test - CONFIGURAÇÕES GERAIS PARA TESTES
# Porta diferente para evitar conflitos
%test.quarkus.http.port=8081
# Log level mais alto para reduzir ruído nos testes
%test.quarkus.log.level=WARN
%test.quarkus.log.category."br.org.cecairbar.durvalcrm".level=INFO